{"version":3,"sources":["MapChart.js","index.js"],"names":["markers","color","name","coordinates","geoPath","geoPaths","IND","countryISO_A3","center","USA","AUS","FRA","memo","_ref","setTooltipContent","_useState","useState","_useState2","Object","slicedToArray","detail","setDetail","_useState3","_useState4","paths","setPaths","_useState5","_useState6","setCenter","_useState7","_useState8","zoom","setZoom","_useState9","_useState10","data","setData","react_default","a","createElement","renderprops","from","to","config","slow","styles","index_umd","style","height","width","data-tip","projection","projectionConfig","scale","geography","disableOptimization","_ref2","geographies","map","geo","i","key","rsmKey","onMouseEnter","_geo$properties","properties","NAME","POP_EST","concat","num","Math","round","onMouseLeave","onClick","ISO_A3","console","log","default","fill","outline","stroke","strokeWidth","hover","pressed","_ref3","index_esm","size","index_es","App","content","setContent","src_MapChart","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.6a703835.chunk.js","sourcesContent":["import React, { memo, useRef, useEffect, useState } from \"react\";\nimport {\n  ComposableMap,\n  Geographies,\n  Geography,\n  Marker,\n  ZoomableGroup\n} from \"react-simple-maps\";\nimport ReactDOM from 'react-dom';\nimport { GiPositionMarker } from 'react-icons/gi';\nimport {IconContext} from 'react-icons'\nimport { Spring, config } from \"react-spring/renderprops\";\nimport ReactTooltip from \"react-tooltip\";\n\n\nconst markers = [\n\n  { color: \"#085229\", name: \"Delhi\", coordinates: [77.1193, 28.4897] },\n  { color: \"#085229\", name: \"Mumbai\", coordinates: [72.8825, 19.7942] },\n  { color: \"#085229\", name: \"Chennai\", coordinates: [80.2707, 13.0827] },\n  { color: \"#a14a45\", name: \"Kolkata\", coordinates: [88.3639, 22.5726] },\n  //{ markerOffset: 15, name: \"Lima\", coordinates: [-77.0428, -12.0464] },\n  //{ markerOffset: 15, name: \"Lima\", coordinates: [77.0428, 12.0464] }\n];\nconst geoPath =\n  \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\n\nconst geoUrl = \"/world.json\";\n\nconst geoPaths = {\n  IND: {\n    countryISO_A3: \"IND\",\n    center: [78.9629, 22.5937],\n    color : \"#389c66\"\n  },\n  USA: {\n    countryISO_A3: \"USA\",\n    center: [-95.7129, 37.0902],\n    color: \"#389c66\"\n  },\n  AUS: {\n    countryISO_A3: \"AUS\",\n    center: [133, -23],\n    color: \"#c4aa52\"\n  },\n  FRA: {\n    countryISO_A3: \"FRA\",\n    center: [1.6, 47],\n    color: \"#389c66\"\n  }\n}\n\n\nconst rounded = num => {\n  if (num > 1000000000) {\n    return Math.round(num / 100000000) / 10 + \"Bn\";\n  } else if (num > 1000000) {\n    return Math.round(num / 100000) / 10 + \"M\";\n  } else {\n    return Math.round(num / 100) / 10 + \"K\";\n  }\n};\n\nconst MapChart = ({ setTooltipContent }) => {\n\n  const [detail, setDetail] = useState(false);\n  const [paths, setPaths] = useState(geoPath);\n  const [center, setCenter] = useState([0, 0]);\n  const [zoom, setZoom] = useState(1);\n  const [data, setData] = useState(\"\")\n\n  const switchPaths = (a) => {\n    console.log(a);\n    paths: detail ? setPaths(geoPath) : setPaths(\"\");\n    center: detail ? setCenter([0, 0]) : setCenter(geoPaths[a].center);\n    zoom: detail ? setZoom(1) : setZoom(5);\n    detail: setDetail(!detail);\n  };\n\n  return (\n  <div>\n    <Spring\n          from={{ zoom: 1 }}\n          to={{ zoom: zoom }}\n          config={config.slow}\n        >\n\n          {styles => (\n          <ComposableMap style={{ height : 800, width : 1200}} data-tip=\"\"  projection = \"geoMercator\" projectionConfig={{ scale: 120 }}>\n            <ZoomableGroup center= {center} zoom={styles.zoom}>\n              <Geographies geography={paths} disableOptimization>\n                  {({ geographies }) =>\n                    geographies.map((geo, i) => (\n                      <Geography\n                        key={geo.rsmKey}\n                        geography={geo}\n                        onMouseEnter={() => {\n                          if(!detail){\n                            const { NAME, POP_EST } = geo.properties;\n                            setTooltipContent(`${NAME} â€” ${rounded(POP_EST)}`);\n                          }\n                        }}\n                        onMouseLeave={() => {\n                          setTooltipContent(\"\");\n                        }}\n                        onClick={() => {\n                          //setTooltipContent(\"hello\");\n                          if (geoPaths[geo.properties.ISO_A3]) { switchPaths(geo.properties.ISO_A3) } ;\n                          //console.log(geo.properties.ISO_A3);\n                        }}\n                        style={{\n                          default: {\n                            fill: geoPaths[geo.properties.ISO_A3] ? geoPaths[geo.properties.ISO_A3].color : \"#889e92\",\n                            outline: \"none\",\n                            stroke: \"#889e92\",\n                            strokeWidth : 0.5\n                          },\n                          hover: {\n                            fill: geoPaths[geo.properties.ISO_A3] ? geoPaths[geo.properties.ISO_A3].color : \"#889e92\",\n                            outline: \"none\",\n                            stroke: \"#889e92\",\n                            strokeWidth : 0.5\n                          },\n                          pressed: {\n                            fill: \"#E42\",\n                            outline: \"none\"\n                          }\n                        }}\n                      />\n                    ))\n                  }\n              </Geographies>\n\n              {markers.map(({ name, coordinates, color }) => (\n                // <ReactTooltip>\n                  <Marker key={name} coordinates={coordinates}>\n                  <GiPositionMarker size={3} color={color}\n                    onMouseEnter={() => {\n                      if(detail)\n                        setData(name);\n                    }}\n                    onMouseLeave={() => {\n                      setData(\"\");\n                    }}\n                    data-tip={data} />\n                     if(detail == true)\n                    <ReactTooltip></ReactTooltip>\n                  </Marker>\n\n                ))}\n\n              </ZoomableGroup>\n          </ComposableMap>\n          )}\n        </Spring>\n    </div>\n  );\n};\n\nexport default memo(MapChart);\n","import React, { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport ReactTooltip from \"react-tooltip\";\n\nimport \"./styles.css\";\n\nimport MapChart from \"./MapChart\";\n\nfunction App() {\n  const [content, setContent] = useState(\"\");\n  return (\n    <div>\n      <h2>World Map</h2>\n      <MapChart setTooltipContent={setContent} />\n      <ReactTooltip>{content}</ReactTooltip>\n    </div>\n  );\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}